<!-- livebook:{"file_entries":[{"name":"demo.jpeg","type":"attachment"},{"name":"supervisor.png","type":"attachment"}]} -->

# Supervisor & OTP for an easy life.

## gen_server

A behaviour module for implementing the server of a client-server relation.

```mermaid
  graph BT
      D(Client #4) ~~~ C(Client #3) ~~~ B(Client #2) ~~~ A(Client #1)
      A & B & C -->|handle_call| GenServer
      GenServer -.->|reply| A & B & C
      D -->|handle_cast -- noreply| GenServer
```

Some Callbacks:

* **init(init_arg)**: Invoked when the server is started. start_link/3 or start/3 will block until it returns.
* **handle_call(request, from, state)**: Invoked to handle synchronous call/3 messages. call/3 will block until a reply is received (unless the call times out or nodes are disconnected).
* **handle_cast(request, state)**: Invoked to handle asynchronous cast/2 messages.
* **handle_info(msg, state)**: Invoked to handle all other messages.

## Supervisor

A supervisor is a process which supervises other processes, which we refer to as child processes.

A supervisor is responsible for starting, stopping, and monitoring its child processes. The basic idea of a supervisor is that it is to keep its child processes alive by restarting them when necessary.

<img src="files/supervisor.png" alt="image" width="700" height="300" />

There are currently three different supervision strategies available to supervisors:

* :one_for_one - Only restart the failed child process.
* :one_for_all - Restart all child processes in the event of a failure.
* :rest_for_one - Restart the failed process and any process started after it.

## DynamicSupervisor

A supervisor optimized to only start children dynamically.

The Supervisor module was designed to handle mostly static children that are started in the given order when the supervisor starts.
A DynamicSupervisor starts with no children. Instead, children are started on demand via start_child/2 and there is no ordering between children

## PartitionSupervisor

A supervisor that starts multiple partitions of the same child.

Certain processes may become bottlenecks in large systems. If those processes can have their state trivially partitioned, in a way there is no dependency between them, then they can use the PartitionSupervisor to create multiple isolated and independent partitions.

## Demo

<img src="files/demo.jpeg" alt="image" width="700" height="600" />

## References:

* [GenServer](https://hexdocs.pm/elixir/main/GenServer.html)
* [Supervisor](https://hexdocs.pm/elixir/main/Supervisor.html)
* [Supervisor Principles](https://www.erlang.org/doc/design_principles/sup_princ)
* [PartitionSupervisor](https://hexdocs.pm/elixir/main/PartitionSupervisor.html)
* [Fix Process Bottlenecks with Partition Supervisor](https://blog.appsignal.com/2022/09/20/fix-process-bottlenecks-with-elixir-1-14s-partition-supervisor.html)
