# Process monitoring & Supervisor in Elixir

## Process - What is the process?

Process just is an isolated island(run a flow code with a owner heap) in Elixir world. Process run & managed by owner scheduler on ErlVM. It's like green thread/lightweight thread in other languages.

## some common call fow for process

start process do a job then exit:

<!-- livebook:{"break_markdown":true} -->

<!-- Learn more at https://mermaid-js.github.io/mermaid -->

```mermaid
stateDiagram-v2
  [*] --> init
  init --> do_job
  do_job --> finish
  finish --> [*]
```

<!-- livebook:{"break_markdown":true} -->

start process init, go to loop then exit:

<!-- livebook:{"break_markdown":true} -->

```mermaid
stateDiagram-v2
  [*] --> init
  init --> loop
  loop --> loop
  loop --> finish
  finish --> [*]
```

<!-- livebook:{"break_markdown":true} -->

init proess like a state machine:

<!-- livebook:{"break_markdown":true} -->

```mermaid
stateDiagram-v2
  [*] --> init
  init --> s1
  s1 --> s2
  s2 --> s3
  s3 --> s1
  s1 --> finish
  finish --> [*]
```

<!-- livebook:{"break_markdown":true} -->

Process simple is a chain of functions(or loop function)

<!-- livebook:{"break_markdown":true} -->

Elixir module for example.

```elixir
defmodule HelloProcess do
  # simple
  def print(msg) do
    IO.puts("#{inspect(self())}, #{msg}")
  end

  # loop
  def loop(n) when is_integer(n) and n > 0 do
    IO.puts("#{inspect(self())}, n = #{n}")

    # loop again in here
    loop(n - 1)
  end

  # exit loop condition
  def loop(_n) do
    IO.puts("#{inspect(self())}, exit.")
  end

  # state 
  def state_n(n) do
    IO.puts("#{inspect(self())}, state: > 2")

    select_state(n - 1)
  end

  def state_2(n) do
    IO.puts("#{inspect(self())}, state: 2")

    select_state(n - 1)
  end

  def state_1(1) do
    IO.puts("#{inspect(self())}, state: 1 & exit")
  end

  def select_state(n) do
    IO.puts("#{inspect(self())}, select state: #{inspect(n)}")

    cond do
      n == 1 ->
        state_1(n)

      n == 2 ->
        state_2(n)

      true ->
        state_n(n)
    end
  end
end
```

```elixir
# for first flow example
IO.puts("\nfirst example\n-----")

a = fn msg ->
  HelloProcess.print(msg)
end

b = fn ->
  a.("Xin chÃ o!")
end

spawn(b)
Process.sleep(100)

# --- for second flow example
IO.puts("\nsecond example\n-----")

spawn(fn -> HelloProcess.loop(3) end)
Process.sleep(100)

# --- for third flow example
IO.puts("\nthird example\n-----")
spawn(fn -> HelloProcess.select_state(4) end)
Process.sleep(100)
```

## Communite between processes

How to communicate between processes? (or how to a process get data from other process)

Don't like other languages Elixir cannot use global variables (but ETS table & `:persistent_term`). A process in Elixir only can send or receive a message to/from other process.

Use `send/2` function for sending a msg to other process.

Use `receive do` for waiting (or get from message box if process has a message) a message from other processes

Message are stored in Mailbox of process (need to care this because it can raise OOM errror & kill VM).

<!-- livebook:{"break_markdown":true} -->

<!-- Learn more at https://mermaid-js.github.io/mermaid -->

```mermaid
sequenceDiagram;
  process_1->>process_2: send a msg to start request
  process_2->>process_1: respond request
  process_2->>process_1: new event
  process_1->>process_1: send to myself
```

## How to monitor/control process

This a common questions we have:

* How to control a process?

* How to know when a process exit or process die?

* How to kill or restart(if process is died) a process?

Management/control are very advantage features of Elixir (benefits from Erlang) and we will go through these.

We can manually controll process by link/monitor feature in Elixir.

## Link between proceses

Elixir(Build on top of Erlang) support create a link between 2 processes.

But what is the link? That a solid connection between two processes. If a process is die then another process will die.

Use by spawn process with function `spawn_link/1`, `spawn_link/3`, `Process.spawn/2` & `Process.spawn/4` with option `:link` or call `Process.link/1` with `PID` after spawned.

For unlink process we can use `Process.unlink/1`.

For get info about link of process we can use `Process.info/2` with option `:links`.

You can have a chain of processes like process A link process B and process B link to process. Now we have a group linked processes A, B & C. If A is die then B & C will die.

The main idea in here, you can fail fast or shutdown all processes fast & easy like a domino effect(chain reaction). Think you have thousands processes then want to fail together or easy shutdown all of them.

*Note: If linked process is exit normally (:normal, :noproc) other process will not be killed.*

```elixir
defmodule LetsCrash do
  def event_loop do
    receive do
      :crash ->
        IO.puts("#{inspect(self())}, I will raise a error!")
        raise "#{inspect(self())}, I'm out"

      :shutdown ->
        IO.puts("#{inspect(self())}, I'm shutting down...")
        exit(:normal)

      :exit_noproc ->
        IO.puts("#{inspect(self())}, No more function for me.")

      {from, :ping} ->
        IO.puts("#{inspect(self())}, I got a ping msg from #{inspect(from)}")
        send(from, :pong)
        event_loop()

      msg ->
        IO.puts("#{inspect(self())}, Unknown msg: #{inspect(msg)}")
        event_loop()
    after
      3000 ->
        IO.puts("#{inspect(self())}, I'm fine")
        event_loop()
    end
  end

  def get_one_msg() do
    receive do
      msg ->
        IO.puts("#{inspect(self())}, got a msg: #{inspect(msg)}")
    end
  end

  def create_son do
    pid = spawn_link(&event_loop/0)
    Process.register(pid, :son)

    IO.puts("spawn son process done => #{inspect(pid)}")
  end

  def init do
    create_son()

    event_loop()
  end

  def create_parent do
    pid = spawn(&init/0)
    Process.register(pid, :parent)
    IO.puts("spawn parent process done => #{inspect(pid)}")

    pid
  end
end
```

Kill processes(if needed)

```elixir
Process.exit(:erlang.list_to_pid(String.to_charlist("<0.165.0>")), :kill)
Process.exit(:erlang.list_to_pid(String.to_charlist("<0.165.0>")), :kill)
```

Let's create `:parent` & `:son` process

```elixir
LetsCrash.create_parent()
```

Let's check `:parent` & `:son` processes.

```elixir
case Process.whereis(:parent) do
  nil ->
    IO.puts("parent process is death")

  pid ->
    result = Process.alive?(pid)
    IO.puts(" #{inspect(pid)} is alive? #{inspect(result)}")
end

case Process.whereis(:son) do
  nil ->
    IO.puts("son process is death")

  pid ->
    result = Process.alive?(pid)
    IO.puts(" #{inspect(pid)} is alive? #{inspect(result)}")
end
```

Get a test by send message to both processes

```elixir
send(:parent, {self(), :ping})
LetsCrash.get_one_msg()

send(:son, {self(), :ping})
LetsCrash.get_one_msg()
```

Let's us crash a process and see what happen.

```elixir
send(:parent, :crash)
```

Let's check processes again.

```elixir
send(:son, :exit_noproc)
```

## Monitor a process

In another hand, you want to know when/how a process died or want to restart a process if it's died.

You can use monitor process feature for above reason.

When a process A monitor process B, process A will receive a message if a process B is died.

Some function for monitor process: `spawn_monitor/`, `spawn_monitor/3`, `Process.monitor/1`, `Process.spawn/2` & `Process.spawn/4` with option `:monitor`.

For demonitor: `Process.demonitor/2`

Message's format:

`{:DOWN, #Reference<...>, :process, #PID<...>, reason}`

<!-- livebook:{"break_markdown":true} -->

Module for demo:

```elixir
defmodule MonitorProcess do
  def event_loop do
    receive do
      :crash ->
        IO.puts("#{inspect(self())}, I will raise a error!")
        raise "#{inspect(self())}, I'm out"

      :shutdown ->
        IO.puts("#{inspect(self())}, I'm shutting down...")
        exit(:normal)

      :exit_noproc ->
        IO.puts("#{inspect(self())}, No more func for me.")

      {from, :ping} ->
        IO.puts("#{inspect(self())}, I got a ping msg from #{inspect(from)}")
        send(from, :pong)
        event_loop()

      msg ->
        IO.puts("#{inspect(self())}, Unknown msg: #{inspect(msg)}")
        event_loop()
    after
      3000 ->
        IO.puts("#{inspect(self())}, I'm fine")
        event_loop()
    end
  end

  def get_one_msg() do
    receive do
      msg ->
        IO.puts("#{inspect(self())}, got a msg: #{inspect(msg)}")
    end
  end

  def create_son do
    # spawn with monitor
    {pid, ref} = spawn_monitor(&event_loop/0)
    Process.register(pid, :son_monitor)

    IO.puts("spawn son process done => #{inspect(pid)}, ref: #{inspect(ref)}")
  end

  def init do
    create_son()

    event_loop()
  end

  def create_parent do
    # normal spawn
    pid = spawn(&init/0)
    Process.register(pid, :parent_monitor)
    IO.puts("spawn parent process done => #{inspect(pid)}")

    pid
  end
end
```

Shutdown all processes:

```elixir
spawn(fn -> send(:son_monitor, :shutdown) end)
spawn(fn -> send(:parent_monitor, :shutdown) end)
```

```elixir
Process.exit(:erlang.list_to_pid(String.to_charlist("<0.165.0>")), :kill)
Process.exit(:erlang.list_to_pid(String.to_charlist("<0.165.0>")), :kill)
```

Spawn parent & son process, parent process will monitor son process.

```elixir
MonitorProcess.create_parent()
```

We have registered parent & son process, let's check by process's name.

```elixir
case Process.whereis(:parent_monitor) do
  nil ->
    IO.puts("parent process is death")

  pid ->
    result = Process.alive?(pid)
    IO.puts(" #{inspect(pid)} is alive? #{inspect(result)}")
end

case Process.whereis(:son_monitor) do
  nil ->
    IO.puts("son process is death")

  pid ->
    result = Process.alive?(pid)
    IO.puts(" #{inspect(pid)} is alive? #{inspect(result)}")
end
```

Just another test. We test by send `:ping` message and get back a `:pong`

```elixir
send(:parent_monitor, {self(), :ping})
LetsCrash.get_one_msg()

send(:son_monitor, {self(), :ping})
LetsCrash.get_one_msg()
```

Let's crash son process.

```elixir
send(:son_monitor, :crash)
```

```elixir
send(:parent_monitor, :crash)
```

```elixir
send(:son_monitor, :shutdown)
```

## Trap process

What is a trap?

That a way to avoid a linked process die follow other process.

We can trap exit a process by function `Process.flag/2` & `Process.flag/3` with option `:trap_exit` and value `true`.

If a process was set `:trap_exit` to `true` the process will receive a message

` {:EXIT, from, reason}` instead exit signal.

Example: If process A link to process B and process was set `:trap_exit` to `true`. If process B was crashed, process A will receive a message like above message.

`:trap_exit` will ignore if procss was `:kill`

Function for example:

```elixir
fun = fn me ->
  receive do
    :stop ->
      IO.puts("#{inspect(self())}, I'm out")

    {:trap, value} ->
      IO.puts("#{inspect(self())}, trap: #{inspect(value)}")
      Process.flag(:trap_exit, value)
      me.(me)

    :raise ->
      raise "#{inspect(self())}, raise a RuntimeError :D"

    {:spawn_link, name} ->
      pid =
        spawn_link(fn ->
          Process.register(self(), name)
          IO.puts("#{inspect(self())}, I'm a new process")
          me.(me)
        end)

      IO.puts("#{inspect(self())}, I'm spawn a new child: #{inspect(pid)}")

      me.(me)

    msg ->
      IO.puts(" #{inspect(self())}, unknown msg: #{inspect(msg)}")
      me.(me)
  end
end
```

Try to kill process by `Process.exit/2` with reason `:normal`:

```elixir
pid =
  spawn(fn ->
    IO.puts("my pid: #{inspect(self())}")
    fun.(fun)
  end)

send(pid, {:spawn_link, :child_trap})

send(pid, {:trap, true})
```

```elixir
send(:child_trap, :raise)
```

```elixir
IO.puts("#{inspect(pid)} is alive? =>  #{inspect(Process.alive?(pid))}")
```

## Build a simple supervisor

From link, monitor & trap_exit above we can build a own supervisor.

For simple I make a supervisor by link process and `:trap_exit`.

Idea the supervisor is a process with `:trap_exit` was set to `true` for receiving exit signal from children. All children will die if supervisor process was die.

<!-- livebook:{"break_markdown":true} -->

<!-- Learn more at https://mermaid-js.github.io/mermaid -->

```mermaid
sequenceDiagram
    Sup->>Child: spawn_link
    Child-->>Sup: msg Die!
    Sup->>Child: re spawn_link
    Sup->>Child: Terminate/Kill
```

<!-- livebook:{"break_markdown":true} -->

The simple supervisor:

```elixir
defmodule MySup do
  ### API ###
  def start(name, childs, opts) when is_atom(name) and is_list(childs) and is_map(opts) do
    # start supervisor process.
    pid = spawn(__MODULE__, :init, [{name, childs, opts}])

    {:ok, pid}
  end

  def start_link(name, childs, opts) when is_atom(name) and is_list(childs) and is_map(opts) do
    # start supervisor process.
    pid = spawn_link(__MODULE__, :init, [{name, childs, opts}])

    {:ok, pid}
  end

  def stop(name) do
    send(name, {self(), :stop})

    receive do
      :stop_ok ->
        :ok
    end
  end

  ### Init function ###
  def init({name, children, _opts} = config) do
    Process.register(self(), name)
    Process.flag(:trap_exit, true)

    IO.puts("started supervisor with name #{inspect(name)}")

    result = start_children(children)
    IO.puts("Started #{inspect(map_size(result))}")

    # go to monitor stage
    sup_loop(result, config)
  end

  ### Private functions ###
  defp sup_loop(
         children,
         {name, child_param, %{strategy: strategy, restart: restart}} = config
       ) do
    receive do
      {from, :stop} ->
        IO.puts("stop supervisor: #{inspect(name)}")
        # stop all child by kill

        send(from, :stop_ok)

      # handle child down
      {:EXIT, pid, reason} ->
        IO.puts(
          "Sup #{inspect(name)}, process die pid: #{inspect(pid)}, reason: #{inspect(reason)}"
        )

        case strategy do
          :standalone ->
            case {restart, reason} do
              # doesn't restart child that force kill
              {:failed, :normal} ->
                IO.puts(
                  "Sup #{inspect(name)}, ignore normal shutdown, child pid: #{inspect(pid)}"
                )

                sup_loop(Map.delete(children, pid), config)

              # restart child
              _ ->
                {module, fun, args} = Map.get(children, pid)
                new_pid = spawn_link(module, fun, args)

                IO.puts(
                  "Sup #{inspect(name)}, strategy: #{inspect(strategy)}, restart child, child's old pid: #{inspect(pid)}, new pid: #{inspect(new_pid)}"
                )

                children =
                  children
                  |> Map.delete(pid)
                  |> Map.put(new_pid, {module, fun, args})

                sup_loop(children, config)
            end

          #
          :group when is_map_key(children, pid) ->
            IO.puts("Sup #{inspect(name)}, child in group died, restart all children now")

            for old_pid <- Map.keys(children) do
              Process.exit(old_pid, :kill)
            end

            children = start_children(child_param)

            sup_loop(children, config)

          _ ->
            sup_loop(children, config)
        end

      unknown ->
        IO.puts("unknown msg: #{inspect(unknown)}")
        sup_loop(children, config)
    end
  end

  defp start_children(childs) do
    start_children(childs, %{})
  end

  defp start_children([], result) do
    result
  end

  defp start_children([{module, fun, args} = child | rest], result) do
    pid = spawn_link(module, fun, args)
    IO.puts("started child #{inspect(pid)}")

    start_children(rest, Map.put(result, pid, child))
  end
end
```

A simple module for demo:

```elixir
defmodule SimpleLoop do
  def loop() do
    receive do
      :stop ->
        :ok

      :raise ->
        raise "raised by #{inspect(self())}"

      {from, :ping} ->
        IO.puts("#{inspect(self())}, received a ping msg from #{inspect(from)}")
        send(from, :pong)
        loop()

      msg ->
        IO.puts("#{inspect(self())}, Unknown msg: #{inspect(msg)}")
        loop()
    end
  end

  def init(name) do
    Process.register(self(), name)
    IO.puts("started child #{inspect(name)}, pid: #{inspect(self())}")

    loop()
  end
end
```

Start supervisor:

```elixir
MySup.start(
  :my_sup,
  [
    {SimpleLoop, :init, [:child_1]},
    {SimpleLoop, :init, [:child_2]}
  ],
  %{strategy: :group, restart: :failed}
)
```

```elixir
send(:child_1, {self(), :ping})

receive do
  msg -> IO.puts("#{inspect(msg)}")
after
  1000 ->
    IO.puts("no :pong return")
end
```

```elixir
Process.alive?(Process.whereis(:child_1))
```

```elixir
send(:child_1, :raise)
```

```elixir
MySup.stop(:my_sup)
```
